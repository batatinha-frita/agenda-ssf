require("dotenv").config();
const { drizzle } = require("drizzle-orm/node-postgres");
const { Pool } = require("pg");
const {
  clinicsTable,
  doctorsTable,
  patientsTable,
  appointmentsTable,
} = require("../src/db/schema.ts");
const { eq, and, between, not, inArray } = require("drizzle-orm");

// Configura√ß√£o do banco
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
});

const db = drizzle(pool);

// Dados para gera√ß√£o de pacientes
const firstNames = [
  "Ana",
  "Bruno",
  "Carlos",
  "Diana",
  "Eduardo",
  "Fernanda",
  "Gabriel",
  "Helena",
  "Igor",
  "Juliana",
  "Lucas",
  "Marina",
  "Nicolas",
  "Olivia",
  "Pedro",
  "Quit√©ria",
  "Rafael",
  "Sofia",
  "Thiago",
  "Ursula",
  "Vitor",
  "Wesley",
  "Ximena",
  "Yara",
  "Zeca",
  "Adriana",
  "Bernardo",
  "Camila",
  "Danilo",
  "Elisa",
  "Fabio",
  "Giovana",
  "Henrique",
  "Isabela",
  "Jo√£o",
  "Kelly",
  "Leonardo",
  "Mariana",
  "Nathan",
  "Paula",
  "Ricardo",
  "Sabrina",
  "Tiago",
  "Vanessa",
  "Wagner",
  "Alice",
  "Beatriz",
  "Caio",
  "D√©bora",
  "Enzo",
  "Fl√°via",
  "Guilherme",
  "Helo√≠sa",
  "Ivan",
  "J√©ssica",
  "Kau√£",
  "Larissa",
  "Mateus",
  "Nat√°lia",
  "Ot√°vio",
  "Priscila",
  "Quintino",
  "Roberta",
  "Samuel",
  "Tatiana",
  "Ulisses",
  "Vit√≥ria",
  "William",
  "Ximena",
  "Yasmin",
  "Zuleika",
  "Andr√©",
  "Bianca",
  "Cl√°udio",
  "Daniela",
  "Everton",
  "Franciele",
  "Gustavo",
  "Ingrid",
  "Joaquim",
  "Katarina",
  "Luan",
  "Michelle",
  "Nelson",
  "Ol√≠via",
  "Patrick",
  "Raquel",
  "S√©rgio",
  "Talita",
  "Ulysses",
  "Viviane",
  "Walter",
  "Aline",
  "Breno",
  "Cintia",
  "Douglas",
  "Elaine",
  "Felipe",
  "Gisele",
  "Hugo",
  "Isis",
  "Jorge",
  "Karine",
  "Leandro",
  "M√¥nica",
  "Natan",
  "Paloma",
  "Ronaldo",
  "Simone",
  "Tales",
  "√örsula",
  "Vinicius",
  "Wanda",
  "Alexandre",
  "B√°rbara",
  "C√©sar",
  "Diane",
  "Edson",
  "F√°tima",
  "Gerson",
  "Haroldo",
  "Iara",
  "Jaime",
  "Karla",
  "Luiz",
  "Magda",
  "Nilton",
  "Patr√≠cia",
  "Roberto",
  "Silvia",
  "Tadeu",
  "Valdirene",
  "Washington",
  "Amanda",
  "Bento",
  "Carla",
  "Davi",
  "Elizabete",
  "Fernando",
  "Graziela",
  "H√©lio",
  "Irene",
  "Jairo",
  "K√°tia",
  "Lu√≠s",
  "Marta",
  "Nilson",
  "Poliana",
  "Rodrigo",
  "Soraia",
  "Teodoro",
  "Valdete",
  "Wilson",
  "Andr√©a",
  "Benedito",
  "C√©lia",
  "Diego",
  "Elza",
  "Fl√°vio",
  "Gilda",
  "Humberto",
  "Iolanda",
  "Jair",
  "Kellen",
  "La√©rcio",
  "M√°rcia",
  "Noemia",
  "Pietra",
  "Rubens",
  "Solange",
  "Tarc√≠sio",
  "Val√©ria",
  "Waldir",
  "Ang√©lica",
  "Benedita",
  "C√©lio",
  "Djalma",
  "Edna",
  "Francisco",
  "Gladis",
];

const lastNames = [
  "Silva",
  "Santos",
  "Oliveira",
  "Souza",
  "Rodrigues",
  "Ferreira",
  "Alves",
  "Pereira",
  "Lima",
  "Gomes",
  "Costa",
  "Ribeiro",
  "Martins",
  "Carvalho",
  "Almeida",
  "Lopes",
  "Soares",
  "Fernandes",
  "Vieira",
  "Barbosa",
  "Rocha",
  "Dias",
  "Monteiro",
  "Mendes",
  "Ramos",
  "Moreira",
  "Reis",
  "Freitas",
  "Morais",
  "Pinto",
  "Cardoso",
  "Farias",
  "Castro",
  "Nascimento",
  "Correia",
  "Ara√∫jo",
  "Campos",
  "Teixeira",
  "Moura",
  "Cavalcante",
  "Nunes",
  "Fonseca",
  "Andrade",
  "Machado",
  "Medeiros",
  "Cunha",
  "Melo",
  "Torres",
  "Santana",
  "Gon√ßalves",
  "Barros",
  "Matos",
  "Porto",
  "Azevedo",
  "Vasconcelos",
  "Nogueira",
  "Rezende",
  "Batista",
  "Duarte",
  "Coelho",
  "Borges",
  "Bezerra",
  "Mendon√ßa",
  "Tavares",
  "Guimar√£es",
  "Carneiro",
  "Amorim",
  "Macedo",
  "Paiva",
  "Magalh√£es",
];

const cities = [
  "S√£o Paulo",
  "Rio de Janeiro",
  "Belo Horizonte",
  "Salvador",
  "Bras√≠lia",
  "Curitiba",
  "Recife",
  "Porto Alegre",
  "Manaus",
  "Bel√©m",
  "Goi√¢nia",
  "Guarulhos",
  "Campinas",
  "S√£o Lu√≠s",
  "Macei√≥",
  "Duque de Caxias",
  "Natal",
  "Teresina",
  "S√£o Bernardo do Campo",
  "Nova Igua√ßu",
  "Jo√£o Pessoa",
  "Santo Andr√©",
  "Osasco",
  "Jaboat√£o dos Guararapes",
  "S√£o Jos√© dos Campos",
  "Ribeir√£o Preto",
  "Uberl√¢ndia",
  "Sorocaba",
  "Contagem",
  "Aracaju",
  "Feira de Santana",
  "Cuiab√°",
  "Joinville",
  "Juiz de Fora",
  "Londrina",
  "Aparecida de Goi√¢nia",
];

const streets = [
  "Rua das Flores",
  "Avenida Paulista",
  "Rua Augusta",
  "Rua do Com√©rcio",
  "Avenida Brasil",
  "Rua Principal",
  "Rua S√£o Jo√£o",
  "Avenida Independ√™ncia",
  "Rua da Paz",
  "Avenida Central",
  "Rua Quinze de Novembro",
  "Rua Sete de Setembro",
  "Avenida Get√∫lio Vargas",
  "Rua Dom Pedro II",
  "Avenida JK",
  "Rua Tiradentes",
  "Avenida Presidente Vargas",
  "Rua Marechal Deodoro",
  "Rua Bar√£o do Rio Branco",
  "Avenida Atl√¢ntica",
  "Rua das Palmeiras",
  "Avenida das Am√©ricas",
  "Rua Jos√© Bonif√°cio",
  "Rua Floriano Peixoto",
  "Avenida Copacabana",
];

// Fun√ß√£o para gerar dados aleat√≥rios
function getRandomElement(array) {
  return array[Math.floor(Math.random() * array.length)];
}

function generateRandomName() {
  return `${getRandomElement(firstNames)} ${getRandomElement(lastNames)}`;
}

function generateRandomEmail(name) {
  const cleanName = name.toLowerCase().replace(/\s+/g, ".");
  const domains = [
    "gmail.com",
    "hotmail.com",
    "yahoo.com",
    "outlook.com",
    "uol.com.br",
  ];
  return `${cleanName}${Math.floor(Math.random() * 1000)}@${getRandomElement(domains)}`;
}

function generateRandomPhone() {
  const ddd = Math.floor(Math.random() * 89) + 11; // DDDs de 11 a 99
  const number = Math.floor(Math.random() * 900000000) + 100000000; // 9 d√≠gitos
  return `(${ddd}) ${number.toString().substring(0, 5)}-${number.toString().substring(5)}`;
}

function generateRandomCPF() {
  const randomDigits = () => Math.floor(Math.random() * 10);
  const cpf = Array.from({ length: 9 }, randomDigits);

  // Calcular d√≠gitos verificadores (simplificado)
  const d1 =
    ((cpf.reduce((acc, digit, index) => acc + digit * (10 - index), 0) * 10) %
      11) %
    10;
  const d2 =
    (([...cpf, d1].reduce(
      (acc, digit, index) => acc + digit * (11 - index),
      0,
    ) *
      10) %
      11) %
    10;

  return `${cpf.join("")}${d1}${d2}`.replace(
    /(\d{3})(\d{3})(\d{3})(\d{2})/,
    "$1.$2.$3-$4",
  );
}

function generateRandomCEP() {
  return `${Math.floor(Math.random() * 90000) + 10000}-${Math.floor(Math.random() * 900) + 100}`;
}

function generateRandomBirthDate() {
  const start = new Date(1950, 0, 1);
  const end = new Date(2010, 11, 31);
  return new Date(
    start.getTime() + Math.random() * (end.getTime() - start.getTime()),
  );
}

// Fun√ß√£o para verificar se hor√°rio est√° dispon√≠vel
function isTimeSlotAvailable(doctor, date, existingAppointments) {
  const appointmentDate = new Date(date);
  const dayOfWeek = appointmentDate.getDay();
  const hour = appointmentDate.getHours();
  const minute = appointmentDate.getMinutes();

  // Verificar se est√° no hor√°rio de trabalho do m√©dico
  const [startHour, startMinute] = doctor.availableFromTime
    .split(":")
    .map(Number);
  const [endHour, endMinute] = doctor.availableToTime.split(":").map(Number);

  const startTime = startHour * 60 + startMinute;
  const endTime = endHour * 60 + endMinute;
  const appointmentTime = hour * 60 + minute;

  // Verificar dia da semana
  if (
    dayOfWeek < doctor.availableFromWeekDay ||
    dayOfWeek > doctor.availableToWeekDay
  ) {
    return false;
  }

  // Verificar hor√°rio
  if (appointmentTime < startTime || appointmentTime >= endTime) {
    return false;
  }

  // Verificar conflito com outros agendamentos
  const sameTimeSlot = existingAppointments.find((apt) => {
    const aptDate = new Date(apt.date);
    return (
      aptDate.getTime() === appointmentDate.getTime() &&
      apt.doctorId === doctor.id
    );
  });

  return !sameTimeSlot;
}

// Fun√ß√£o para gerar hor√°rio aleat√≥rio dispon√≠vel
function generateRandomAvailableTime(doctor, date, existingAppointments) {
  const baseDate = new Date(date);
  const [startHour, startMinute] = doctor.availableFromTime
    .split(":")
    .map(Number);
  const [endHour, endMinute] = doctor.availableToTime.split(":").map(Number);

  // Gerar intervalos de 30 em 30 minutos
  const possibleTimes = [];
  for (let hour = startHour; hour < endHour; hour++) {
    for (let minute = 0; minute < 60; minute += 30) {
      if (hour === endHour - 1 && minute >= endMinute) break;

      const testDate = new Date(baseDate);
      testDate.setHours(hour, minute, 0, 0);

      if (isTimeSlotAvailable(doctor, testDate, existingAppointments)) {
        possibleTimes.push(testDate);
      }
    }
  }

  return possibleTimes.length > 0 ? getRandomElement(possibleTimes) : null;
}

async function main() {
  try {
    console.log("üöÄ Iniciando cria√ß√£o de dados massivos...");

    // Buscar cl√≠nica, m√©dicos e pacientes existentes
    const clinics = await db.select().from(clinicsTable).limit(1);
    if (clinics.length === 0) {
      throw new Error("Nenhuma cl√≠nica encontrada!");
    }

    const clinic = clinics[0];
    console.log(`üìã Usando cl√≠nica: ${clinic.name}`);

    const doctors = await db
      .select()
      .from(doctorsTable)
      .where(eq(doctorsTable.clinicId, clinic.id));
    console.log(`üë®‚Äç‚öïÔ∏è M√©dicos encontrados: ${doctors.length}`);

    const existingPatients = await db
      .select()
      .from(patientsTable)
      .where(eq(patientsTable.clinicId, clinic.id));
    console.log(`üë• Pacientes existentes: ${existingPatients.length}`);

    const existingAppointments = await db
      .select()
      .from(appointmentsTable)
      .where(eq(appointmentsTable.clinicId, clinic.id));
    console.log(`üìÖ Agendamentos existentes: ${existingAppointments.length}`);

    // Extrair emails e CPFs existentes para evitar duplicatas
    const existingEmails = new Set(existingPatients.map((p) => p.email));
    const existingCPFs = new Set(
      existingPatients.map((p) => p.cpf).filter(Boolean),
    );

    // Criar 188 novos pacientes
    console.log("\nüë• Criando 188 novos pacientes...");
    const newPatients = [];

    for (let i = 0; i < 188; i++) {
      let email, cpf;
      let attempts = 0;

      // Gerar email √∫nico
      do {
        const name = generateRandomName();
        email = generateRandomEmail(name);
        attempts++;
      } while (existingEmails.has(email) && attempts < 100);

      // Gerar CPF √∫nico
      attempts = 0;
      do {
        cpf = generateRandomCPF();
        attempts++;
      } while (existingCPFs.has(cpf) && attempts < 100);

      const name = generateRandomName();
      const patient = {
        clinicId: clinic.id,
        name,
        email,
        phoneNumber: generateRandomPhone(),
        sex: Math.random() > 0.5 ? "female" : "male",
        cpf,
        birthDate: generateRandomBirthDate(),
        cep: generateRandomCEP(),
        logradouro: getRandomElement(streets),
        numero: Math.floor(Math.random() * 9999) + 1,
        complemento:
          Math.random() > 0.7
            ? `Apto ${Math.floor(Math.random() * 500) + 1}`
            : null,
        emergencyContact: generateRandomName(),
        emergencyPhone: generateRandomPhone(),
        observations:
          Math.random() > 0.8 ? "Paciente com hist√≥rico de alergias" : null,
      };

      newPatients.push(patient);
      existingEmails.add(email);
      existingCPFs.add(cpf);

      if ((i + 1) % 50 === 0) {
        console.log(`   ‚úÖ Criados ${i + 1}/188 pacientes`);
      }
    }

    // Inserir pacientes no banco
    console.log("üíæ Inserindo pacientes no banco de dados...");
    const insertedPatients = await db
      .insert(patientsTable)
      .values(newPatients)
      .returning();
    console.log(
      `‚úÖ ${insertedPatients.length} pacientes inseridos com sucesso!`,
    );

    // Combinar pacientes existentes e novos
    const allPatients = [...existingPatients, ...insertedPatients];

    // Criar 500 novos agendamentos
    console.log("\nüìÖ Criando 500 novos agendamentos...");
    const newAppointments = [];
    const appointmentStatuses = ["confirmed", "completed", "pending"];
    const paymentStatuses = ["paid", "pending", "overdue"];

    // Gerar datas dos √∫ltimos 60 dias at√© pr√≥ximos 30 dias
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - 60);
    const endDate = new Date();
    endDate.setDate(endDate.getDate() + 30);

    let successfulAppointments = 0;
    let attempts = 0;
    const maxAttempts = 2000; // Limite de tentativas para evitar loop infinito

    while (successfulAppointments < 500 && attempts < maxAttempts) {
      attempts++;

      // Escolher m√©dico aleat√≥rio
      const doctor = getRandomElement(doctors);

      // Gerar data aleat√≥ria dentro do per√≠odo
      const randomDate = new Date(
        startDate.getTime() +
          Math.random() * (endDate.getTime() - startDate.getTime()),
      );

      // Verificar se √© um dia da semana v√°lido para o m√©dico
      const dayOfWeek = randomDate.getDay();
      if (
        dayOfWeek < doctor.availableFromWeekDay ||
        dayOfWeek > doctor.availableToWeekDay
      ) {
        continue;
      }

      // Gerar hor√°rio dispon√≠vel
      const appointmentTime = generateRandomAvailableTime(doctor, randomDate, [
        ...existingAppointments,
        ...newAppointments,
      ]);

      if (!appointmentTime) {
        continue;
      }

      // Escolher paciente aleat√≥rio
      const patient = getRandomElement(allPatients);

      // Verificar se o paciente j√° tem agendamento no mesmo hor√°rio
      const patientConflict = [
        ...existingAppointments,
        ...newAppointments,
      ].find((apt) => {
        const aptDate = new Date(apt.date);
        return (
          aptDate.getTime() === appointmentTime.getTime() &&
          apt.patientId === patient.id
        );
      });

      if (patientConflict) {
        continue;
      }

      // Criar agendamento
      const appointment = {
        clinicId: clinic.id,
        patientId: patient.id,
        doctorId: doctor.id,
        date: appointmentTime,
        appointmentPriceInCents: doctor.appointmentPriceInCents,
        appointmentStatus: getRandomElement(appointmentStatuses),
        paymentStatus: getRandomElement(paymentStatuses),
        notes: Math.random() > 0.7 ? "Consulta de rotina" : null,
      };

      newAppointments.push(appointment);
      successfulAppointments++;

      if (successfulAppointments % 100 === 0) {
        console.log(`   ‚úÖ Criados ${successfulAppointments}/500 agendamentos`);
      }
    }

    console.log(`üìä Total de tentativas: ${attempts}`);
    console.log(`‚úÖ Agendamentos v√°lidos criados: ${successfulAppointments}`);

    // Inserir agendamentos no banco
    if (newAppointments.length > 0) {
      console.log("üíæ Inserindo agendamentos no banco de dados...");
      const insertedAppointments = await db
        .insert(appointmentsTable)
        .values(newAppointments)
        .returning();
      console.log(
        `‚úÖ ${insertedAppointments.length} agendamentos inseridos com sucesso!`,
      );
    }

    // Resumo final
    console.log("\nüéâ RESUMO FINAL:");
    console.log(`üë• Pacientes adicionados: ${insertedPatients.length}`);
    console.log(`üìÖ Agendamentos adicionados: ${newAppointments.length}`);
    console.log(`üìä Total de pacientes: ${allPatients.length}`);
    console.log(
      `üìä Total de agendamentos: ${existingAppointments.length + newAppointments.length}`,
    );
  } catch (error) {
    console.error("‚ùå Erro:", error);
  } finally {
    await pool.end();
  }
}

main();
